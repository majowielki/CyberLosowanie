using CyberLosowanie.Interfaces.Services;
using CyberLosowanie.Models;
using CyberLosowanie.Models.Dto;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;

namespace CyberLosowanie.Controllers
{
    [Route("api/CyberLosowanie")]
    [ApiController]
    [Authorize] // Add authorization requirement
    public class CyberLosowanieController : ControllerBase
    {
        private readonly ICyberekService _cyberekService;

        public CyberLosowanieController(ICyberekService cyberekService)
        {
            _cyberekService = cyberekService ?? throw new ArgumentNullException(nameof(cyberekService));
        }

        [HttpGet]
        [ProducesResponseType(typeof(ApiResponse<IEnumerable<Cyberek>>), 200)]
        [ProducesResponseType(typeof(ApiResponse<object>), 500)]
        public async Task<IActionResult> GetCyberki()
        {
            var cyberki = await _cyberekService.GetAllCyberkiAsync();
            return Ok(ApiResponse<IEnumerable<Cyberek>>.Success(cyberki));
        }

        [HttpGet("{id:int}", Name = "GetCyberek")]
        [ProducesResponseType(typeof(ApiResponse<Cyberek>), 200)]
        [ProducesResponseType(typeof(ApiResponse<object>), 400)]
        [ProducesResponseType(typeof(ApiResponse<object>), 404)]
        [ProducesResponseType(typeof(ApiResponse<object>), 500)]
        public async Task<IActionResult> GetCyberek([Range(1, int.MaxValue)] int id)
        {
            var cyberek = await _cyberekService.GetCyberekByIdAsync(id);
            return Ok(ApiResponse<Cyberek>.Success(cyberek));
        }

        [HttpGet("available-targets/{id:int}")]
        [ProducesResponseType(typeof(ApiResponse<List<int>>), 200)]
        [ProducesResponseType(typeof(ApiResponse<object>), 400)]
        [ProducesResponseType(typeof(ApiResponse<object>), 404)]
        [ProducesResponseType(typeof(ApiResponse<object>), 409)] // Conflict - no targets available
        [ProducesResponseType(typeof(ApiResponse<object>), 500)]
        public async Task<IActionResult> GetAvailableGiftTargets([Range(1, int.MaxValue)] int id)
        {
            var availableTargets = await _cyberekService.GetAvailableGiftTargetsAsync(id);
            
            // Handle case where no targets are available
            if (!availableTargets.Any())
            {
                return Conflict(ApiResponse<object>.Error(
                    "No gift targets are currently available for this cyberek. " +
                    "This may occur when all other cyberki have been assigned as gifts or due to banned list restrictions.",
                    409));
            }
            
            return Ok(ApiResponse<List<int>>.Success(availableTargets));
        }

        [HttpPost("assign-cyberek")]
        [ProducesResponseType(typeof(ApiResponse<object>), 200)]
        [ProducesResponseType(typeof(ApiResponse<object>), 400)]
        [ProducesResponseType(typeof(ApiResponse<object>), 404)]
        [ProducesResponseType(typeof(ApiResponse<object>), 409)] // Conflict - user already has cyberek
        [ProducesResponseType(typeof(ApiResponse<object>), 500)]
        public async Task<IActionResult> AssignCyberekToUser(
            [Required][FromQuery] string userName,
            [FromBody] CyberekAssignmentDTO assignmentDto)
        {
            if (!ModelState.IsValid)
            {
                var errors = ModelState.Values
                    .SelectMany(v => v.Errors)
                    .Select(e => e.ErrorMessage)
                    .ToList();
                return BadRequest(ApiResponse<object>.ValidationError(errors));
            }

            var result = await _cyberekService.AssignCyberekToUserAsync(userName, assignmentDto.CyberekId);
            
            if (!result)
            {
                return Conflict(ApiResponse<object>.Error(
                    "User already has a cyberek assigned. Use the assign-gift endpoint to assign a gift.",
                    409));
            }

            return Ok(ApiResponse<object>.Success(null, "Cyberek assigned to user successfully"));
        }

        [HttpPut("assign-gift")]
        [ProducesResponseType(typeof(ApiResponse<object>), 200)]
        [ProducesResponseType(typeof(ApiResponse<object>), 400)]
        [ProducesResponseType(typeof(ApiResponse<object>), 404)]
        [ProducesResponseType(typeof(ApiResponse<object>), 409)] // Conflict - no cyberek assigned or gift already assigned
        [ProducesResponseType(typeof(ApiResponse<object>), 500)]
        public async Task<IActionResult> AssignGift(
            [Required][FromQuery] string userName, 
            [FromBody] GiftAssignmentDTO giftDto)
        {
            if (!ModelState.IsValid)
            {
                var errors = ModelState.Values
                    .SelectMany(v => v.Errors)
                    .Select(e => e.ErrorMessage)
                    .ToList();
                return BadRequest(ApiResponse<object>.ValidationError(errors));
            }

            await _cyberekService.AssignGiftAsync(userName, giftDto.GiftedCyberekId);
            return Ok(ApiResponse<object>.Success(null, "Gift assignment completed successfully"));
        }
    }

    // New DTOs for cleaner separation
    public class CyberekAssignmentDTO
    {
        [Range(CyberLosowanieConstants.MIN_CYBEREK_ID, CyberLosowanieConstants.MAX_CYBEREK_ID, 
               ErrorMessage = CyberLosowanieConstants.INVALID_CYBEREK_ID)]
        public int CyberekId { get; set; }
    }

    public class GiftAssignmentDTO
    {
        [Range(CyberLosowanieConstants.MIN_CYBEREK_ID, CyberLosowanieConstants.MAX_CYBEREK_ID, 
               ErrorMessage = CyberLosowanieConstants.INVALID_CYBEREK_ID)]
        public int GiftedCyberekId { get; set; }
    }
}
