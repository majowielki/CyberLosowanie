using CyberLosowanie.Constants;
using CyberLosowanie.Interfaces.Repositories;
using CyberLosowanie.Models;
using CyberLosowanie.Models.Dto;
using CyberLosowanie.Services;
using FluentAssertions;
using Moq;

namespace CyberLosowanie.Test
{
    public class ValidationServiceTests
    {
        private readonly Mock<ICyberekRepository> _cyberekRepositoryMock;
        private readonly Mock<IApplicationUserRepository> _userRepositoryMock;
        private readonly ValidationService _validationService;

        public ValidationServiceTests()
        {
            _cyberekRepositoryMock = new Mock<ICyberekRepository>();
            _userRepositoryMock = new Mock<IApplicationUserRepository>();
            _validationService = new ValidationService(_cyberekRepositoryMock.Object, _userRepositoryMock.Object);
        }

        [Fact]
        public void Constructor_WithNullCyberekRepository_ThrowsArgumentNullException()
        {
            // Act & Assert
            var exception = Assert.Throws<ArgumentNullException>(() =>
                new ValidationService(null!, _userRepositoryMock.Object));
            
            exception.ParamName.Should().Be("cyberekRepository");
        }

        [Fact]
        public void Constructor_WithNullUserRepository_ThrowsArgumentNullException()
        {
            // Act & Assert
            var exception = Assert.Throws<ArgumentNullException>(() =>
                new ValidationService(_cyberekRepositoryMock.Object, null!));
            
            exception.ParamName.Should().Be("userRepository");
        }

        [Theory]
        [InlineData(0)]
        [InlineData(-1)]
        [InlineData(13)]
        [InlineData(100)]
        public void ValidateCyberekId_WithInvalidId_ReturnsValidationError(int invalidId)
        {
            // Act
            var result = _validationService.ValidateCyberekId(invalidId);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_CYBEREK_ID);
        }

        [Theory]
        [InlineData(1)]
        [InlineData(6)]
        [InlineData(12)]
        public void ValidateCyberekId_WithValidId_ReturnsNoErrors(int validId)
        {
            // Act
            var result = _validationService.ValidateCyberekId(validId);

            // Assert
            result.Should().BeEmpty();
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_WithNullUserName_ReturnsValidationError()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 1, GiftedCyberekId = 2 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync(null!, updateDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_USERNAME);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_WithEmptyUserName_ReturnsValidationError()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 1, GiftedCyberekId = 2 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("", updateDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_USERNAME);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_WithInvalidCyberekIds_ReturnsValidationErrors()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 0, GiftedCyberekId = 13 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", updateDto);

            // Assert
            result.Should().HaveCount(2);
            result.Should().AllBe(CyberLosowanieConstants.INVALID_CYBEREK_ID);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_WithNonExistentUser_ReturnsUserNotFoundError()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 1, GiftedCyberekId = 2 };
            _userRepositoryMock.Setup(x => x.GetByUsernameAsync("testuser"))
                .ReturnsAsync((ApplicationUser?)null);

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", updateDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.USER_NOT_FOUND);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_WithNonExistentCyberek_ReturnsCyberekNotFoundError()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 1, GiftedCyberekId = 2 };
            var user = new ApplicationUser { UserName = "testuser" };
            
            _userRepositoryMock.Setup(x => x.GetByUsernameAsync("testuser"))
                .ReturnsAsync(user);
            _cyberekRepositoryMock.Setup(x => x.GetByIdAsync(1))
                .ReturnsAsync((Cyberek?)null);
            _cyberekRepositoryMock.Setup(x => x.GetByIdAsync(2))
                .ReturnsAsync(new Cyberek { Id = 2 });

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", updateDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.CYBEREK_NOT_FOUND);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_WithNonExistentTargetCyberek_ReturnsTargetCyberekNotFoundError()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 1, GiftedCyberekId = 2 };
            var user = new ApplicationUser { UserName = "testuser" };
            var cyberek = new Cyberek { Id = 1 };
            
            _userRepositoryMock.Setup(x => x.GetByUsernameAsync("testuser"))
                .ReturnsAsync(user);
            _cyberekRepositoryMock.Setup(x => x.GetByIdAsync(1))
                .ReturnsAsync(cyberek);
            _cyberekRepositoryMock.Setup(x => x.GetByIdAsync(2))
                .ReturnsAsync((Cyberek?)null);

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", updateDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be($"Target {CyberLosowanieConstants.CYBEREK_NOT_FOUND}");
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_WithValidData_ReturnsNoErrors()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 1, GiftedCyberekId = 2 };
            var user = new ApplicationUser { UserName = "testuser" };
            var cyberek = new Cyberek { Id = 1 };
            var targetCyberek = new Cyberek { Id = 2 };

            _userRepositoryMock.Setup(x => x.GetByUsernameAsync("testuser"))
                .ReturnsAsync(user);
            _cyberekRepositoryMock.Setup(x => x.GetByIdAsync(1))
                .ReturnsAsync(cyberek);
            _cyberekRepositoryMock.Setup(x => x.GetByIdAsync(2))
                .ReturnsAsync(targetCyberek);

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", updateDto);

            // Assert
            result.Should().BeEmpty();
        }

        [Fact]
        public async Task ValidateLoginRequestAsync_WithNullRequest_ReturnsValidationError()
        {
            // Act
            var result = await _validationService.ValidateLoginRequestAsync(null!);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be("Login request cannot be null");
        }

        [Fact]
        public async Task ValidateLoginRequestAsync_WithEmptyUserName_ReturnsValidationError()
        {
            // Arrange
            var request = new LoginRequestDTO { UserName = "", Password = "password" };

            // Act
            var result = await _validationService.ValidateLoginRequestAsync(request);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_USERNAME);
        }

        [Fact]
        public async Task ValidateLoginRequestAsync_WithEmptyPassword_ReturnsValidationError()
        {
            // Arrange
            var request = new LoginRequestDTO { UserName = "testuser", Password = "" };

            // Act
            var result = await _validationService.ValidateLoginRequestAsync(request);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_PASSWORD);
        }

        [Fact]
        public async Task ValidateLoginRequestAsync_WithValidRequest_ReturnsNoErrors()
        {
            // Arrange
            var request = new LoginRequestDTO { UserName = "testuser", Password = "password" };

            // Act
            var result = await _validationService.ValidateLoginRequestAsync(request);

            // Assert
            result.Should().BeEmpty();
        }

        [Fact]
        public async Task ValidateRegisterRequestAsync_WithNullRequest_ReturnsValidationError()
        {
            // Act
            var result = await _validationService.ValidateRegisterRequestAsync(null!);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be("Register request cannot be null");
        }

        [Fact]
        public async Task ValidateRegisterRequestAsync_WithExistingUserName_ReturnsValidationError()
        {
            // Arrange
            var request = new RegisterRequestDTO { UserName = "existinguser", Password = "password" };
            var existingUser = new ApplicationUser { UserName = "existinguser" };

            _userRepositoryMock.Setup(x => x.GetByUsernameAsync("existinguser"))
                .ReturnsAsync(existingUser);

            // Act
            var result = await _validationService.ValidateRegisterRequestAsync(request);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.USERNAME_ALREADY_EXISTS);
        }

        [Fact]
        public async Task ValidateRegisterRequestAsync_WithValidNewUser_ReturnsNoErrors()
        {
            // Arrange
            var request = new RegisterRequestDTO { UserName = "newuser", Password = "password" };

            _userRepositoryMock.Setup(x => x.GetByUsernameAsync("newuser"))
                .ReturnsAsync((ApplicationUser?)null);

            // Act
            var result = await _validationService.ValidateRegisterRequestAsync(request);

            // Assert
            result.Should().BeEmpty();
        }
    }
}
