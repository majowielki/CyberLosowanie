using CyberLosowanie.Constants;
using CyberLosowanie.Interfaces.Repositories;
using CyberLosowanie.Models;
using CyberLosowanie.Models.Dto;
using CyberLosowanie.Services;
using FluentAssertions;
using Moq;

namespace CyberLosowanie.Test
{
    public class ValidationServiceTests
    {
        private readonly Mock<ICyberekRepository> _cyberekRepositoryMock;
        private readonly Mock<IApplicationUserRepository> _userRepositoryMock;
        private readonly ValidationService _validationService;

        public ValidationServiceTests()
        {
            _cyberekRepositoryMock = new Mock<ICyberekRepository>();
            _userRepositoryMock = new Mock<IApplicationUserRepository>();
            _validationService = new ValidationService(_cyberekRepositoryMock.Object, _userRepositoryMock.Object);
        }

        #region Constructor Tests

        [Fact]
        public void Constructor_WithNullCyberekRepository_ThrowsArgumentNullException()
        {
            // Act & Assert
            var exception = Assert.Throws<ArgumentNullException>(() =>
                new ValidationService(null!, _userRepositoryMock.Object));

            exception.ParamName.Should().Be("cyberekRepository");
        }

        [Fact]
        public void Constructor_WithNullUserRepository_ThrowsArgumentNullException()
        {
            // Act & Assert
            var exception = Assert.Throws<ArgumentNullException>(() =>
                new ValidationService(_cyberekRepositoryMock.Object, null!));

            exception.ParamName.Should().Be("userRepository");
        }

        #endregion

        #region ValidateCyberekId Tests

        [Theory]
        [InlineData(0)]
        [InlineData(-1)]
        [InlineData(-100)]
        [InlineData(13)]
        [InlineData(100)]
        [InlineData(int.MinValue)]
        [InlineData(int.MaxValue)]
        public void ValidateCyberekId_WithInvalidId_ReturnsValidationError(int invalidId)
        {
            // Act
            var result = _validationService.ValidateCyberekId(invalidId);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_CYBEREK_ID);
        }

        [Theory]
        [InlineData(1)]
        [InlineData(6)]
        [InlineData(12)]
        public void ValidateCyberekId_WithValidId_ReturnsNoErrors(int validId)
        {
            // Act
            var result = _validationService.ValidateCyberekId(validId);

            // Assert
            result.Should().BeEmpty();
        }

        [Fact]
        public void ValidateCyberekId_WithBoundaryValues_ValidatesCorrectly()
        {
            // Test minimum valid value
            var minResult = _validationService.ValidateCyberekId(CyberLosowanieConstants.MIN_CYBEREK_ID);
            minResult.Should().BeEmpty();

            // Test maximum valid value
            var maxResult = _validationService.ValidateCyberekId(CyberLosowanieConstants.MAX_CYBEREK_ID);
            maxResult.Should().BeEmpty();

            // Test just below minimum
            var belowMinResult = _validationService.ValidateCyberekId(CyberLosowanieConstants.MIN_CYBEREK_ID - 1);
            belowMinResult.Should().HaveCount(1);

            // Test just above maximum
            var aboveMaxResult = _validationService.ValidateCyberekId(CyberLosowanieConstants.MAX_CYBEREK_ID + 1);
            aboveMaxResult.Should().HaveCount(1);
        }

        #endregion

        #region ValidateCyberekAssignmentAsync Tests

        [Fact]
        public async Task ValidateCyberekAssignmentAsync_WithNullUserName_ReturnsValidationError()
        {
            // Arrange
            var assignmentDto = new CyberekAssignmentDTO { CyberekId = 1 };

            // Act
            var result = await _validationService.ValidateCyberekAssignmentAsync(null!, assignmentDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_USERNAME);
        }

        [Fact]
        public async Task ValidateCyberekAssignmentAsync_WithEmptyUserName_ReturnsValidationError()
        {
            // Arrange
            var assignmentDto = new CyberekAssignmentDTO { CyberekId = 1 };

            // Act
            var result = await _validationService.ValidateCyberekAssignmentAsync("", assignmentDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_USERNAME);
        }

        [Fact]
        public async Task ValidateCyberekAssignmentAsync_WithNullDto_ReturnsValidationError()
        {
            // Act
            var result = await _validationService.ValidateCyberekAssignmentAsync("testuser", null!);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be("Assignment data cannot be null");
        }

        [Fact]
        public async Task ValidateCyberekAssignmentAsync_WithInvalidCyberekId_ReturnsValidationError()
        {
            // Arrange
            var assignmentDto = new CyberekAssignmentDTO { CyberekId = 0 };

            // Act
            var result = await _validationService.ValidateCyberekAssignmentAsync("testuser", assignmentDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_CYBEREK_ID);
        }

        [Fact]
        public async Task ValidateCyberekAssignmentAsync_WithNonExistentUser_ReturnsUserNotFoundError()
        {
            // Arrange
            var assignmentDto = new CyberekAssignmentDTO { CyberekId = 1 };
            _userRepositoryMock.Setup(x => x.GetByUsernameAsync("testuser"))
                .ReturnsAsync((ApplicationUser?)null);

            // Act
            var result = await _validationService.ValidateCyberekAssignmentAsync("testuser", assignmentDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.USER_NOT_FOUND);
        }

        [Fact]
        public async Task ValidateCyberekAssignmentAsync_WithValidData_ReturnsNoErrors()
        {
            // Arrange
            var assignmentDto = new CyberekAssignmentDTO { CyberekId = 1 };
            var user = new ApplicationUser { UserName = "testuser" };
            var cyberek = new Cyberek { Id = 1 };

            _userRepositoryMock.Setup(x => x.GetByUsernameAsync("testuser"))
                .ReturnsAsync(user);
            _cyberekRepositoryMock.Setup(x => x.GetByIdAsync(1))
                .ReturnsAsync(cyberek);

            // Act
            var result = await _validationService.ValidateCyberekAssignmentAsync("testuser", assignmentDto);

            // Assert
            result.Should().BeEmpty();
        }

        #endregion

        #region ValidateGiftAssignmentAsync (New Method) Tests

        [Fact]
        public async Task ValidateGiftAssignmentAsync_NewMethod_WithNullUserName_ReturnsValidationError()
        {
            // Arrange
            var giftDto = new GiftedCyberekAssignmentDTO { GiftedCyberekId = 2 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync(null!, giftDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_USERNAME);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_NewMethod_WithNullDto_ReturnsValidationError()
        {
            // Act
            GiftedCyberekAssignmentDTO nullDto = null!;
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", nullDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be("Gift assignment data cannot be null");
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_NewMethod_WithInvalidGiftedCyberekId_ReturnsValidationError()
        {
            // Arrange
            var giftDto = new GiftedCyberekAssignmentDTO { GiftedCyberekId = 0 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", giftDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_CYBEREK_ID);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_NewMethod_WithValidData_ReturnsNoErrors()
        {
            // Arrange
            var giftDto = new GiftedCyberekAssignmentDTO { GiftedCyberekId = 2 };
            var user = new ApplicationUser { UserName = "testuser" };
            var targetCyberek = new Cyberek { Id = 2 };

            _userRepositoryMock.Setup(x => x.GetByUsernameAsync("testuser"))
                .ReturnsAsync(user);
            _cyberekRepositoryMock.Setup(x => x.GetByIdAsync(2))
                .ReturnsAsync(targetCyberek);

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", giftDto);

            // Assert
            result.Should().BeEmpty();
        }

        #endregion

        #region Legacy ValidateGiftAssignmentAsync Tests

        [Fact]
        public async Task ValidateGiftAssignmentAsync_Legacy_WithNullUserName_ReturnsValidationError()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 1, GiftedCyberekId = 2 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync(null!, updateDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_USERNAME);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_Legacy_WithEmptyUserName_ReturnsValidationError()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 1, GiftedCyberekId = 2 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("", updateDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_USERNAME);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_Legacy_WithWhitespaceUserName_ReturnsValidationError()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 1, GiftedCyberekId = 2 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("   ", updateDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_USERNAME);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_Legacy_WithInvalidCyberekIds_ReturnsValidationErrors()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 0, GiftedCyberekId = 13 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", updateDto);

            // Assert
            result.Should().HaveCount(2);
            result.Should().AllBe(CyberLosowanieConstants.INVALID_CYBEREK_ID);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_Legacy_WithSameCyberekIds_ReturnsValidationErrors()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 5, GiftedCyberekId = 5 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", updateDto);

            // Assert - Should validate both IDs even if they're the same
            result.Should().BeEmpty(); // Since they're valid IDs, the business logic for same ID should be handled elsewhere
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_Legacy_WithOnlyInvalidCyberekId_ReturnsOneError()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 0, GiftedCyberekId = 5 };

            // Act  
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", updateDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_CYBEREK_ID);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_Legacy_WithOnlyInvalidGiftedCyberekId_ReturnsOneError()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 5, GiftedCyberekId = 0 };

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", updateDto);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_CYBEREK_ID);
        }

        [Fact]
        public async Task ValidateGiftAssignmentAsync_Legacy_WithValidData_ReturnsNoErrors()
        {
            // Arrange
            var updateDto = new CyberekUpdateDTO { CyberekId = 1, GiftedCyberekId = 2 };
            var user = new ApplicationUser { UserName = "testuser" };
            var cyberek = new Cyberek { Id = 1 };
            var targetCyberek = new Cyberek { Id = 2 };

            _userRepositoryMock.Setup(x => x.GetByUsernameAsync("testuser"))
                .ReturnsAsync(user);
            _cyberekRepositoryMock.Setup(x => x.GetByIdAsync(1))
                .ReturnsAsync(cyberek);
            _cyberekRepositoryMock.Setup(x => x.GetByIdAsync(2))
                .ReturnsAsync(targetCyberek);

            // Act
            var result = await _validationService.ValidateGiftAssignmentAsync("testuser", updateDto);

            // Assert
            result.Should().BeEmpty();
        }

        #endregion

        #region ValidateLoginRequestAsync Tests

        [Fact]
        public async Task ValidateLoginRequestAsync_WithNullRequest_ReturnsValidationError()
        {
            // Act
            var result = await _validationService.ValidateLoginRequestAsync(null!);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be("Login request cannot be null");
        }

        [Theory]
        [InlineData("")]
        [InlineData("   ")]
        [InlineData("\t")]
        [InlineData("\n")]
        public async Task ValidateLoginRequestAsync_WithInvalidUserName_ReturnsValidationError(string invalidUserName)
        {
            // Arrange
            var request = new LoginRequestDTO { UserName = invalidUserName, Password = "password" };

            // Act
            var result = await _validationService.ValidateLoginRequestAsync(request);

            // Assert
            result.Should().HaveCount(1);
            result[0].Should().Be(CyberLosowanieConstants.INVALID_USERNAME);
        }
        #endregion

    }
}